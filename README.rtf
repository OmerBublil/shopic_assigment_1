{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset128 HiraginoSans-W3;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12720\viewh7800\viewkind0
\pard\tqr\tx720\tqr\tx1440\tqr\tx2160\tqr\tx2880\tqr\tx3600\tqr\tx4320\tqr\tx5040\tqr\tx5760\tqr\tx6480\tqr\tx7200\tqr\tx7920\tqr\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Shopic CSV Upload Automation Assignment\
\
## Setup Instructions\
\
1. Clone the repository and navigate to the project directory:\
   git clone <shopic_home\uc0\u8235 _\uc0\u8236 assigment>\
   cd shopic_assigment_1\
\
\
2. Create and activate a Python virtual environment:\
   python3 -m venv venv\
   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\
\
3. Install all required dependencies:\
   pip install -r requirements.txt\
\
4. Start the local server before running any tests:\
   python server/app.py   \
\
   Note: The server must be running locally at `http://localhost:8000` before test execution begins.\
\
## Test Execution Instructions\
\
Tests are written using `pytest` and `Playwright`. To execute the tests:\
pytest tests\
\
To generate an HTML test report:\
pytest tests/ --html=report.html\
\
Alternatively, to create a plain text report:\
pytest tests/ > test_report.txt\
\
\
## Project Structure\
\
\
shopic_assigment_1/\
\uc0\u9474 \

\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  server/\
\uc0\u9474    \u9492 \u9472 \u9472  app.py                          # Flask server that handles CSV uploads\
\uc0\u9474 \

\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  tests/\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  test_csv_uploads.py            # Automated test suite using Playwright and Pytest\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  csv_upload_tester.py           # Core logic for testing CSV upload functionality\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  UploadPage.py                  # Page Object Model for interacting with the upload page\
\uc0\u9474    \u9492 \u9472 \u9472  conftest.py                    # Pytest fixtures for Playwright browser setup\
\uc0\u9474 \

\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  data/\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  valid_products.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  invalid_products.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  missing_price.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  empty_file.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  header_only.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  non_numeric_price.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  negative_price.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  missing_headers.csv\
\uc0\u9474    
\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  empty_rows.csv\
\uc0\u9474    \u9492 \u9472 \u9472  expected_results.json          # Defines expected output for each test case\
\uc0\u9474 \

\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  requirements.txt                   # Python dependencies for the project\

\f1 \'84\'a5
\f0 \uc0\u9472 \u9472  README.md                          # Project documentation (this file)\
\uc0\u9492 \u9472 \u9472  Home Assignment                    # External file, not part of the project structure\
\
\
## Assumptions and Limitations\
\
- The local server must be manually started before running the tests. It is assumed to be available at `http://localhost:8000`.\
- All test CSV files are located in the `data/` directory.\
- Expected results for each test case are defined in `expected_results.json`. The structure of this file must remain synchronized with the test inputs.\
- Error messages returned by the application are matched as exact string values and are case-sensitive.\
- Each CSV file is expected to include the following headers: `name`, `price`, `quantity`, and `category`.\
- Files containing only headers or empty content are treated as edge cases and handled explicitly.\
- If the server fails to respond within 10 seconds, the test will fail due to a timeout.\
- No CI/CD pipeline is configured. All tests are executed manually.\
\
## Test Report\
\
A full test execution report is available in `report.html`.\
}